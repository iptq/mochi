use symbol::Symbol;

use crate::ast::*;
use crate::scanner::Token;

#[LALR]
grammar;

pub Program: Program = MultiPunct<Sep, Decl> => Program(<>);

pub Decl: Decl = {
    <func:Func> => Decl::Func(func),
};

pub Func: Func = {
    "fn" <name:Ident> <args:FuncArgs?> <returns:FuncReturn?> ":" <body:Body<MultiPunctOne<Sep, Stmt>>> => Func { name, args: args.unwrap_or_else(|| Vec::new()), body, returns: returns.unwrap_or_else(|| Type::gen()) },
};

FuncArgs: Vec<(Symbol, Type)> = "(" <args:Punct<",", FuncArg>> ")" => args;

FuncArg: (Symbol, Type) = {
    <name:Ident> ":" <ty:TypeLiteral> => (name, ty),
    <name:Ident> => (name, Type::gen()),
};

FuncReturn: Type = "->" <ty:TypeLiteral> => ty;

Stmt: Stmt = {
    <expr:Expr> => Stmt::Expr(expr),
    "return" <expr:Expr> => Stmt::Return(expr),
    "if" <cond:Expr> => Stmt::If(cond, Vec::new(), Vec::new()),
};

Expr: Expr = ExprLogicalOr => <>;

ExprLogicalOr: Expr = {
    <left:ExprLogicalOr> "||" <right:ExprLogicalAnd> => Expr::BinOp(BinOp::LogicalOr, Box::new(left), Box::new(right)),
    ExprLogicalAnd => <>,
};

ExprLogicalAnd: Expr = {
    <left:ExprLogicalAnd> "&&" <right:ExprBitwiseOr> => Expr::BinOp(BinOp::LogicalAnd, Box::new(left), Box::new(right)),
    ExprBitwiseOr => <>,
};

ExprBitwiseOr: Expr = {
    <left:ExprBitwiseOr> "|" <right:ExprBitwiseXor> => Expr::BinOp(BinOp::BitwiseOr, Box::new(left), Box::new(right)),
    ExprBitwiseXor => <>,
};

ExprBitwiseXor: Expr = {
    <left:ExprBitwiseXor> "^" <right:ExprBitwiseAnd> => Expr::BinOp(BinOp::BitwiseXor, Box::new(left), Box::new(right)),
    ExprBitwiseAnd => <>,
};

ExprBitwiseAnd: Expr = {
    <left:ExprBitwiseAnd> "&" <right:ExprEquality> => Expr::BinOp(BinOp::BitwiseAnd, Box::new(left), Box::new(right)),
    ExprEquality => <>,
};

ExprEquality: Expr = {
    <left:ExprEquality> "==" <right:ExprComparison> => Expr::BinOp(BinOp::Equals, Box::new(left), Box::new(right)),
    <left:ExprEquality> "!=" <right:ExprComparison> => Expr::BinOp(BinOp::NotEquals, Box::new(left), Box::new(right)),
    ExprComparison => <>,
};

ExprComparison: Expr = {
    <left:ExprComparison> "<" <right:ExprShift> => Expr::BinOp(BinOp::LessThan, Box::new(left), Box::new(right)),
    <left:ExprComparison> "<=" <right:ExprShift> => Expr::BinOp(BinOp::LessThanEquals, Box::new(left), Box::new(right)),
    <left:ExprComparison> ">" <right:ExprShift> => Expr::BinOp(BinOp::GreaterThan, Box::new(left), Box::new(right)),
    <left:ExprComparison> ">=" <right:ExprShift> => Expr::BinOp(BinOp::GreaterThanEquals, Box::new(left), Box::new(right)),
    ExprShift => <>,
};

ExprShift: Expr = {
    <left:ExprShift> "<<" <right:ExprTerms> => Expr::BinOp(BinOp::LeftShift, Box::new(left), Box::new(right)),
    <left:ExprShift> ">>" <right:ExprTerms> => Expr::BinOp(BinOp::RightShift, Box::new(left), Box::new(right)),
    ExprTerms => <>,
};

ExprTerms: Expr = {
    <left:ExprTerms> "+" <right:ExprFactors> => Expr::BinOp(BinOp::Add, Box::new(left), Box::new(right)),
    <left:ExprTerms> "-" <right:ExprFactors> => Expr::BinOp(BinOp::Sub, Box::new(left), Box::new(right)),
};

ExprFactors: Expr = {
    <left:ExprFactors> "*" <right:ExprUnary> => Expr::BinOp(BinOp::Mul, Box::new(left), Box::new(right)),
    <left:ExprFactors> "/" <right:ExprUnary> => Expr::BinOp(BinOp::Div, Box::new(left), Box::new(right)),
    <left:ExprFactors> "%" <right:ExprUnary> => Expr::BinOp(BinOp::Mod, Box::new(left), Box::new(right)),
    ExprUnary => <>,
};

ExprUnary: Expr = {
    "!" <expr:ExprFinal> => Expr::UnOp(UnOp::LogicalNot, Box::new(expr)),
    "~" <expr:ExprFinal> => Expr::UnOp(UnOp::BitwiseNot, Box::new(expr)),
};

ExprFinal: Expr = {
    Int => Expr::Int(<>.parse::<i64>().unwrap()),
};

TypeLiteral: Type = {
    <ty:TypeLiteral2> => ty,
    <ty1:TypeLiteral2> "->" <ty2:TypeLiteral> => Type::Func(Vec::new(), Box::new(ty2)),
};

TypeLiteral2: Type = {
    <name:Ident> => Type::Name(name),
    "(" <ty:TypeLiteral> ")" => ty,
};

// util =======================================================================

Sep = {
    ";",
    LineSep,
};

Body<T>: T = {
    "(" <t:T> ")" => t,
    Sep* Indent <t:T> Dedent => t,
};

MultiPunct<D, T>: Vec<T> = {
    <f:T?> <v:(D+ <T>)*> D* => match f {
        None => v,
        Some(f) => {
            let mut v = v;
            v.insert(0, f);
            v
        },
    }
}

MultiPunctOne<D, T>: Vec<T> = {
    <f:T> <v:(D+ <T>)*> D* => {
        let mut v = v;
        v.insert(0, f);
        v
    }
}

Punct<D, T>: Vec<T> = {
    <f:T?> <v:(D <T>)*> D? => match f {
        None => v,
        Some(f) => {
            let mut v = v;
            v.insert(0, f);
            v
        },
    }
}

PunctOne<D, T>: Vec<T> = {
    <f:T> <v:(D <T>)*> D? => {
        let mut v = v;
        v.insert(0, f);
        v
    }
}

PunctTwo<D, T>: Vec<T> = {
    <f:T> D <s:T> <v:(D <T>)*> D? => {
        let mut v = v;
        v.insert(0, f);
        v.insert(1, s);
        v
    }
}

extern {
    type Location = usize;
    type Error = crate::scanner::ScanError;

    enum crate::scanner::Token {
        "class" => Token::KwdClass,
        "extern" => Token::KwdExtern,
        "for" => Token::KwdFor,
        "fn" => Token::KwdFn,
        "if" => Token::KwdIf,
        "in" => Token::KwdIn,
        "let" => Token::KwdLet,
        "match" => Token::KwdMatch,
        "return" => Token::KwdReturn,
        "use" => Token::KwdUse,

        "->" => Token::SymArrow,
        "=>" => Token::SymDblArrow,
        ".." => Token::SymDblDot,
        "==" => Token::SymDblEqual,
        ">=" => Token::SymGreaterThanEquals,
        "<<" => Token::SymLeftShift,
        "<=" => Token::SymLessThanEquals,
        "||" => Token::SymLogicalOr,
        "&&" => Token::SymLogicalAnd,
        "!=" => Token::SymNotEqual,
        ">>" => Token::SymRightShift,

        "&" => Token::SymAmpersand,
        "!" => Token::SymBang,
        "^" => Token::SymCaret,
        ":" => Token::SymColon,
        "," => Token::SymComma,
        "-" => Token::SymDash,
        "." => Token::SymDot,
        "=" => Token::SymEqual,
        ">" => Token::SymGreaterThan,
        "<" => Token::SymLessThan,
        "(" => Token::SymParenL,
        ")" => Token::SymParenR,
        "%" => Token::SymPercent,
        "|" => Token::SymPipe,
        "+" => Token::SymPlus,
        ";" => Token::SymSemicolon,
        "/" => Token::SymSlash,
        "*" => Token::SymStar,
        "~" => Token::SymTilde,
        "_" => Token::SymUnderscore,

        Int => Token::IntLiteral(<String>),
        String => Token::StringLiteral(<String>),
        Ident => Token::Ident(<Symbol>),

        Indent => Token::Indent,
        Dedent => Token::Dedent,
        LineSep => Token::Sep,
    }
}
